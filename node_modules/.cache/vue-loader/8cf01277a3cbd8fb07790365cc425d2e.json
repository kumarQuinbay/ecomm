{"remainingRequest":"/Users/shradhaagarwal/Desktop/ecomm/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/shradhaagarwal/Desktop/ecomm/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shradhaagarwal/Desktop/ecomm/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shradhaagarwal/Desktop/ecomm/src/pages/Merchant.vue?vue&type=template&id=ac238328&scoped=true&","dependencies":[{"path":"/Users/shradhaagarwal/Desktop/ecomm/src/pages/Merchant.vue","mtime":1631642727533},{"path":"/Users/shradhaagarwal/Desktop/ecomm/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shradhaagarwal/Desktop/ecomm/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/shradhaagarwal/Desktop/ecomm/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shradhaagarwal/Desktop/ecomm/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}